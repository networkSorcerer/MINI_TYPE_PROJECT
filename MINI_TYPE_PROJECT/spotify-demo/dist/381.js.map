{"version":3,"file":"381.js?ver=f44c28de5c34f1ea59b9","mappings":"mLACO,MCgBMA,EACXC,UACE,IACE,MAAMC,EAAO,IAAIC,gBAAgB,CAC/BC,WAAY,uBAcd,aAZuBC,EAAAA,EAAMC,KAC3B,yCACAJ,EACA,CACEK,QAAS,CACPC,cAAe,SAAFC,QAvBFC,EAwBTC,oEArBU,oBAAXC,OAEFC,KAAKH,GAGLI,OAAOC,KAAKL,GAAMM,SAAS,YAkB1B,eAAgB,wCAINN,IAClB,CAAE,MAAOO,GACP,MAAM,IAAIC,MAAM,2CAClB,CAjCmBR,OCYvB,EAb0BS,KACxB,MAAMC,ECFyBC,MAC/B,MAAM,KAAEX,IAASY,EAAAA,EAAAA,GAAS,CACxBC,SAAU,CAAC,2BACXC,QAASxB,IAGX,OAD8BU,aAAI,EAAJA,EAAMe,cDHNJ,GAC9B,OAAOC,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,gBACXC,QAASA,KACP,IAAKJ,EACH,MAAM,IAAIF,MAAM,sBAElB,MERuBjB,WAG3B,IASE,aARuBI,EAAAA,EAAMqB,IAAI,GAADjB,OJPJkB,6BIQP,gCACnB,CACEpB,QAAS,CACPC,cAAe,UAAFC,OAAYW,OAIfV,IAClB,CAAE,MAAOO,GACP,MAAM,IAAIC,MAAM,+BAClB,GFPWU,CAAcR,O,cGR3B,MAWA,EAXoBS,KAClB,MAAM,KAAEnB,EAAI,MAAEO,EAAK,UAAEa,GAAcX,IACnC,OACEY,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAW,MAAKH,SAAC,2BCGhD,EARiBI,KAEbL,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACF,EAAW,K","sources":["webpack://spotify-demo/./src/configs/commonConfig.ts","webpack://spotify-demo/./src/apis/authApi.ts","webpack://spotify-demo/./src/hooks/useGetNewReleases.ts","webpack://spotify-demo/./src/hooks/useClientCredentialToken.ts","webpack://spotify-demo/./src/apis/albumApi.ts","webpack://spotify-demo/./src/pages/HomePage/components/NewReleases.tsx","webpack://spotify-demo/./src/pages/HomePage/HopePage.tsx"],"sourcesContent":["\r\nexport const SPOTIFY_BASE_URL = process.env.SPOTIFY_BASE_URL;\r\n","import axios from \"axios\";\r\nimport { clientId, clientSecret } from \"../configs/authConfig\";\r\nimport { ClientCredentialTokenResponse } from \"../models/auth\";\r\n// import { URLSearchParams } from \"url\";\r\n\r\nconst encodedBase64 = (data: string): string => {\r\n  // Buffer가 있는 환경과 없는 환경이 있기 때문에 이렇게 처리.\r\n\r\n  if (typeof window !== \"undefined\") {\r\n    // 브라우저 환경\r\n    return btoa(data);\r\n  } else {\r\n    // Node.js 환경\r\n    return Buffer.from(data).toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport const getClientCredentialToken =\r\n  async (): Promise<ClientCredentialTokenResponse> => {\r\n    try {\r\n      const body = new URLSearchParams({\r\n        grant_type: \"client_credentials\",\r\n      });\r\n      const response = await axios.post(\r\n        \"https://accounts.spotify.com/api/token\",\r\n        body,\r\n        {\r\n          headers: {\r\n            Authorization: `Basic ${encodedBase64(\r\n              clientId + \":\" + clientSecret\r\n            )}`,\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\"Failed to fetch client credential token.\");\r\n    }\r\n  };","import { useQuery } from \"@tanstack/react-query\";\r\nimport { getNewRelease } from \"../apis/albumApi\";\r\nimport useClientCredentialToken from \"./useClientCredentialToken\";\r\n\r\nconst useGetNewReleases = () => {\r\n  const clientCredentialToken = useClientCredentialToken();\r\n  return useQuery({\r\n    queryKey: [\"new-releases\"],\r\n    queryFn: () => {\r\n      if (!clientCredentialToken) {\r\n        throw new Error(\"No token available\");\r\n      }\r\n      return getNewRelease(clientCredentialToken);\r\n    },\r\n  });\r\n};\r\n\r\nexport default useGetNewReleases;","import { useQuery } from \"@tanstack/react-query\";\r\nimport { getClientCredentialToken } from \"../apis/authApi\";\r\n\r\nconst useClientCredentialToken = (): string | undefined => {\r\n  const { data } = useQuery({\r\n    queryKey: [\"client-credential-token\"],\r\n    queryFn: getClientCredentialToken,\r\n  });\r\n  const ClientCredentialToken = data?.access_token;\r\n  return ClientCredentialToken;\r\n};\r\n\r\nexport default useClientCredentialToken;","import axios from \"axios\";\r\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\r\nimport { getNewReleaseResponse } from \"../models/album\";\r\n\r\nexport const getNewRelease = async (\r\n  clientCredentialToken: string\r\n): Promise<getNewReleaseResponse> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${SPOTIFY_BASE_URL}/browse/new-releases?limit=6`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${clientCredentialToken}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch new releases\");\r\n  }\r\n};\r\n\r\nexport default getNewRelease;","import { Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport useGetNewReleases from \"../../../hooks/useGetNewReleases\";\r\n\r\nconst NewReleases = () => {\r\n  const { data, error, isLoading } = useGetNewReleases();\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h1\" paddingTop=\"8px\">\r\n        New Released Albums\r\n      </Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewReleases;\r\n","import React from 'react';\r\nimport NewReleases from './components/NewReleases';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div>\r\n      <NewReleases />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"],"names":["getClientCredentialToken","async","body","URLSearchParams","grant_type","axios","post","headers","Authorization","concat","data","clientId","window","btoa","Buffer","from","toString","error","Error","useGetNewReleases","clientCredentialToken","useClientCredentialToken","useQuery","queryKey","queryFn","access_token","get","process","getNewRelease","NewReleases","isLoading","_jsx","children","Typography","variant","paddingTop","HomePage"],"sourceRoot":""}